version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: airflow_postgres
    restart: always
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - confluent

  airflow-webserver:
    image: apache/airflow:2.10.5-python3.9
    container_name: airflow_webserver
    restart: always
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    volumes:
      - airflow_logs:/opt/airflow/logs
      - ./dags:/opt/airflow/dags
      - ./scripts/init_airflow.sh:/opt/airflow/scripts/init_airflow.sh
      - ./requirements.txt:/opt/airflow/requirements.txt
    entrypoint: ["/opt/airflow/scripts/init_airflow.sh"]
    networks:
      - confluent

  airflow-scheduler:
    image: apache/airflow:2.10.5-python3.9
    container_name: airflow_scheduler
    restart: always
    depends_on:
      - airflow-webserver
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    volumes:
      - airflow_logs:/opt/airflow/logs
      - ./dags:/opt/airflow/dags
      - ./requirements.txt:/opt/airflow/requirements.txt
    entrypoint: ["/bin/bash", "-c", "pip install -r /opt/airflow/requirements.txt && airflow scheduler"]
    networks:
      - confluent

  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - confluent

  kafka:
    image: confluentinc/cp-server:7.9.0
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      CONFLUENT_METRICS_ENABLE: 'false'
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - confluent

  schema-registry:
    image: confluentinc/cp-schema-registry:7.9.0
    container_name: schema-registry
    restart: always
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
    ports:
      - "8081:8081"
    networks:
      - confluent

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.9.0
    container_name: control-center
    restart: always
    depends_on:
      - kafka
      - schema-registry
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka:29092
      CONTROL_CENTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
    ports:
      - "9021:9021"
    networks:
      - confluent

  spark-master:
    image: bitnami/spark:3.5.5
    container_name: spark-master
    restart: always
    command: >
      bash -c "pip install cassandra-driver && spark-class org.apache.spark.deploy.master.Master"
    ports:
      - "8082:8080"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
    volumes:
      - ./spark/jobs:/opt/bitnami/spark/jobs
      - ./spark/configs/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
    networks:
      - confluent

  spark-worker:
    image: bitnami/spark:3.5.5
    container_name: spark-worker
    restart: always
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    volumes:
      - ./spark/jobs:/opt/bitnami/spark/jobs
    networks:
      - confluent

  cassandra:
    image: cassandra:5.0.4
    container_name: cassandra
    restart: always
    ports:
      - "9042:9042"
    environment:
      CASSANDRA_CLUSTER_NAME: admin
      CASSANDRA_NUM_TOKENS: 256
    volumes:
      - cassandra_data:/var/lib/cassandra
    networks:
      - confluent

volumes:
  postgres_data:
  airflow_logs:
  cassandra_data:

networks:
  confluent: